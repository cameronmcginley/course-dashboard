import React from "react";
import Button from "@material-ui/core/Button";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogTitle from "@material-ui/core/DialogTitle";
import {
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Autocomplete,
} from "@mui/material";
import AsyncCSV from "./AsyncCSV";
import CourseDropDown from "./CourseDropDown";
import {
  collection,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  FieldValue,
  query,
  limit,
  orderBy,
  startAfter,
  startAt,
  endBefore,
  limitToLast,
  setState,
  where,
} from "firebase/firestore";
import { db } from "../firebase-config";
import CircularProgress from "@mui/material/CircularProgress";

const getCourseList = async () => {
  // Get all courses for the dropdown
  var data = query(collection(db, "sign-ins"), orderBy("sortKey"), limit(10));
  var documentSnapshots = await getDocs(data);

  // Only get course, give it a display name with name + id
  let courseList = [];
  documentSnapshots.forEach((doc) => {
    courseList.push({
      course: doc.data().courseName + " " + "(ID " + doc.data().courseID + ")",
    });
  });

  console.log(courseList);
  return courseList;
};

export default function AlertDialog() {
  const [open, setOpen] = React.useState(false);
  let [courseList, setCourseList] = React.useState([]);
  const loading = open && courseList.length === 0;

  let handleClickOpen = async () => {
    setOpen(true);
    // Only generate course list when opened
    setCourseList(await getCourseList());
    console.log(courseList);
  };

  function handleClose() {
    setOpen(false);
  }

  let queries = {
    userID: null,
    courseName: null,
    courseID: null,
  };

  return (
    <div>
      <Button variant="outlined" color="primary" onClick={handleClickOpen}>
        Export to CSV
      </Button>
      <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">{"Optional Queries"}</DialogTitle>

        <DialogActions>
          <TextField
            id="outlined-basic"
            label="User ID"
            variant="outlined"
            onChange={(e) => {
              queries.userID = e.target.value;
            }}
          />

          {/* <Autocomplete
                disablePortal
                id="combo-box-demo"
                options={courseList}
                sx={{ width: 300 }}
                // renderInput={(params) => <TextField {...params} label="Courses" />}
                loading={loading}
                renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Asynchronous"
                      InputProps={{
                        ...params.InputProps,
                        endAdornment: (
                          <React.Fragment>
                            {loading ? <CircularProgress color="inherit" size={20} /> : null}
                            {params.InputProps.endAdornment}
                          </React.Fragment>
                        ),
                      }}
                    />)}
            /> */}

          {/* Wait for props before rendering */}
          {/* CourseList generated by button click to open dialog box */}
          {/* Empty array is true, check length */}
          {courseList.length ? (
            <CourseDropDown courseList={courseList} />
          ) : null}

          {/* <TextField id="outlined-basic" label="Course Name" variant="outlined" 
                onChange={
                    (e) => { queries.courseName = e.target.value
                }}/>

            <TextField id="outlined-basic" label="Course ID" variant="outlined" 
                onChange={
                    (e) => { queries.courseID = e.target.value
                }}/> */}

          <Button onClick={handleClose} color="primary" autoFocus>
            Close
          </Button>

          <AsyncCSV queries={queries} />
        </DialogActions>
      </Dialog>
    </div>
  );
}
